
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xegkqqtphhhhhelhxbgl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhlZ2txcXRwaGhoaGhlbGh4YmdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIxNDg4MTIsImV4cCI6MjA1NzcyNDgxMn0.nZuijowIj85GLYmQIWMc-hjJbfd-q-bxeXzkkzk5hH0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Improved function for testing connection and verifying data
export const testSupabaseConnection = async () => {
  try {
    // First, let's check if we can establish a basic connection
    const { data: connectionData, error: connectionError } = await supabase
      .from('users')
      .select('count')
      .single();
      
    if (connectionError) {
      console.error('Erro na conexão com Supabase:', connectionError);
      return { 
        success: false, 
        error: connectionError,
        message: 'Não foi possível conectar ao banco de dados.'
      };
    }
    
    // Now try to get some data
    const { data, error } = await supabase
      .from('financial_notes')
      .select('*')
      .limit(5);
    
    if (error) {
      console.error('Erro ao buscar dados:', error);
      return { 
        success: false, 
        error,
        message: 'Conexão estabelecida, mas não foi possível buscar dados.'
      };
    }
    
    console.log('Conexão e dados recuperados com sucesso:', data);
    return { 
      success: true, 
      data,
      message: 'Conexão estabelecida e dados recuperados com sucesso.' 
    };
  } catch (error) {
    console.error('Erro inesperado na conexão com Supabase:', error);
    return { 
      success: false, 
      error,
      message: 'Erro inesperado ao tentar conectar ao banco de dados.'
    };
  }
};

// Função para testar inserção de dados
export const testSupabaseInsert = async (tabela: 'financial_notes' | 'safe_contacts' | 'users', dados: any) => {
  try {
    console.log(`Tentando inserir dados em ${tabela}:`, dados);
    
    const { data, error } = await supabase
      .from(tabela)
      .insert(dados)
      .select();
    
    if (error) {
      console.error(`Erro ao inserir em ${tabela}:`, error);
      return { success: false, error };
    }
    
    console.log(`Dados inseridos com sucesso em ${tabela}:`, data);
    return { success: true, data };
  } catch (error) {
    console.error(`Erro ao inserir em ${tabela}:`, error);
    return { success: false, error };
  }
};

// Função para verificar usuários no banco de dados com melhor tratamento de erros
export const checkUsersInSupabase = async () => {
  try {
    console.log('Iniciando verificação de usuários no Supabase...');
    
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .limit(10);
    
    if (error) {
      console.error('Erro ao buscar usuários:', error);
      return { 
        success: false, 
        error,
        message: 'Não foi possível buscar usuários do banco de dados.' 
      };
    }
    
    if (!data || data.length === 0) {
      console.log('Nenhum usuário encontrado no banco de dados.');
      return { 
        success: true, 
        data: [], 
        message: 'Nenhum usuário encontrado no banco de dados.'
      };
    }
    
    console.log(`Encontrados ${data.length} usuários no banco de dados:`, data);
    return { 
      success: true, 
      data,
      message: `Encontrados ${data.length} usuários no banco de dados.`
    };
  } catch (error) {
    console.error('Erro inesperado ao buscar usuários:', error);
    return { 
      success: false, 
      error,
      message: 'Erro inesperado ao tentar buscar usuários.'
    };
  }
};
